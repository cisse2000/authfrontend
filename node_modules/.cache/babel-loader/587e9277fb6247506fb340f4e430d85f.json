{"ast":null,"code":"import { mapState } from \"vuex\";\nimport Navbar from \"./components/Navbar.vue\";\nimport ApiService from \"./services/ApiService\";\nimport ApiClient from \"./services/ClientApiService\";\nexport default {\n  name: \"App\",\n  computed: mapState(['user']),\n  data: () => ({\n    IDLE_TIMEOUT: 60 * 10,\n    idleSecondesTimer: 0,\n    idleSecondsCounter: 0\n  }),\n\n  mounted() {\n    document.onclick = () => {\n      this.idleSecondsCounter = 0; //   //Pour chaque click on actualise le token\n      //   let axiosService = new ApiService()\n      //   axiosService.add('/jwt/refresh/', { refresh: localStorage.getItem('refreshToken')})\n      //   .then(response => {\n      //     localStorage.setItem('accessToken', response.data.access)            \n      //   })\n      //   .catch(error => {\n      //     console.log(error, \"Erreur de clique\")\n      //   })\n    };\n\n    document.onmousemove = () => {\n      this.idleSecondsCounter = 0;\n    }; //On appel cette fonction chaque 1 seconde\n\n\n    this.idleSecondesTimer = window.setInterval(this.chekIdleTime, 1000);\n  },\n\n  methods: {\n    chekIdleTime() {\n      this.idleSecondsCounter++;\n\n      if (this.idleSecondsCounter >= this.IDLE_TIMEOUT) {\n        //On reinitialise le compteur\n        window.clearInterval(this.idleSecondesTimer);\n        this.$store.state.user = null;\n        this.$router.push({\n          name: 'logout'\n        });\n      }\n    }\n\n  },\n  components: {\n    Navbar\n  },\n\n  beforeCreate() {\n    this.$store.commit('initializeStore'); //Si un utilisateur est connecté.\n\n    if (this.$store.state.accessToken) {\n      let axioApi = new ApiClient();\n      axioApi.add('/jwt/verify/', {\n        token: this.$store.state.accessToken\n      }).then(response => {\n        console.log(JSON.stringify(response.data));\n      }).catch(error => {\n        //Si le token de connexion est expiré On l'actualise\n        axioApi.add('/jwt/refresh/', {\n          refresh: localStorage.getItem('refreshToken')\n        }).then(response => {\n          localStorage.setItem('accessToken', response.data.access);\n        }).catch(error => {\n          console.log(error, \"Pas d'access au token\");\n        });\n      });\n      let service = new ApiService();\n      service.find('/users/me/').then(response => {\n        let user = JSON.stringify(response.data);\n        this.$store.state.user = user; // console.log(user)\n      }).catch(error => {\n        console.log(error.data, \"Error \");\n      });\n    } else {}\n  }\n\n};","map":{"version":3,"mappings":"AAkBA;AACA;AACA;AACA;AAEA;EACAA,WADA;EAEAC,4BAFA;EAGAC;IAEAC,qBAFA;IAGAC,oBAHA;IAIAC;EAJA,EAHA;;EAUAC;IACAC;MACA,4BADA,CAGA;MACA;MACA;MACA;MAEA;MAEA;MACA;MACA;MACA;IACA,CAdA;;IAiBAA;MACA;IACA,CAFA,CAlBA,CAqBA;;;IACA;EAEA,CAlCA;;EAmCAC;IAEAC;MACA;;MAEA;QACA;QACAC;QACA;QAEA;UAAAV;QAAA;MAEA;IACA;;EAbA,CAnCA;EAmDAW;IACAC;EADA,CAnDA;;EAsDAC;IAEA,sCAFA,CAIA;;IACA;MAEA;MACAC;QACAC;MADA,GAGAC,IAHA,CAGAC;QACAC;MACA,CALA,EAMAC,KANA,CAMAC;QAEA;QAEAN;UAAAO;QAAA,GACAL,IADA,CACAC;UAEAK;QAEA,CALA,EAMAH,KANA,CAMAC;UACAF;QACA,CARA;MAUA,CApBA;MAsBA;MACAK,2BACAP,IADA,CACAC;QACA;QAEA,8BAHA,CAIA;MACA,CANA,EAOAE,KAPA,CAOAC;QACAF;MACA,CATA;IAYA,CAtCA,MAsCA,CAEA;EACA;;AApGA","names":["name","computed","data","IDLE_TIMEOUT","idleSecondesTimer","idleSecondsCounter","mounted","document","methods","chekIdleTime","window","components","Navbar","beforeCreate","axioApi","token","then","response","console","catch","error","refresh","localStorage","service"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["  <template>\n  <v-app>\n    <Navbar/>\n    \n    <v-main>\n      <div class=\"is-loading-bar has-text-centered \" v-bind:class=\"{'is-loading': $store.state.isLoading}\" >\n        <div class=\"lds-dual-ring\"></div>\n      </div>\n      <!-- <div>{{user}}</div> -->\n      <!-- <div class=\"text-center \">Vous serez déconnecter dans {{ IDLE_TIMEOUT - idleSecondsCounter}} secondes</div> -->\n      \n      \n      <router-view/>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport Navbar from \"./components/Navbar.vue\";\nimport ApiService from \"./services/ApiService\";\nimport ApiClient from \"./services/ClientApiService\";\n\nexport default {\n    name: \"App\",\n    computed: mapState(['user']),\n    data: () => ({\n        \n      IDLE_TIMEOUT : 60 * 10,\n      idleSecondesTimer:0,\n      idleSecondsCounter:0\n\n    }),\n    mounted(){\n      document.onclick = () => {\n        this.idleSecondsCounter = 0;\n\n      //   //Pour chaque click on actualise le token\n      //   let axiosService = new ApiService()\n      //   axiosService.add('/jwt/refresh/', { refresh: localStorage.getItem('refreshToken')})\n      //   .then(response => {\n  \n      //     localStorage.setItem('accessToken', response.data.access)            \n          \n      //   })\n      //   .catch(error => {\n      //     console.log(error, \"Erreur de clique\")\n      //   })\n      };\n\n\n      document.onmousemove = () => {\n        this.idleSecondsCounter = 0;\n      };\n      //On appel cette fonction chaque 1 seconde\n      this.idleSecondesTimer = window.setInterval(this.chekIdleTime, 1000);\n\n    },\n    methods:{\n\n      chekIdleTime(){\n        this.idleSecondsCounter++;\n        \n        if(this.idleSecondsCounter >= this.IDLE_TIMEOUT ){\n          //On reinitialise le compteur\n          window.clearInterval(this.idleSecondesTimer);\n          this.$store.state.user = null\n          \n          this.$router.push({name: 'logout'})\n          \n        }\n      }\n    }\n    ,\n    components: { \n      Navbar \n    },\n    beforeCreate(){\n    \n      this.$store.commit('initializeStore')\n      \n      //Si un utilisateur est connecté.\n      if(this.$store.state.accessToken){\n\n        let axioApi = new ApiClient()\n         axioApi.add('/jwt/verify/', {\n          token: this.$store.state.accessToken\n         })\n        .then(response => {\n          console.log(JSON.stringify(response.data))\n        })\n        .catch(error => {\n          \n          //Si le token de connexion est expiré On l'actualise\n          \n          axioApi.add('/jwt/refresh/', { refresh: localStorage.getItem('refreshToken')})\n          .then(response => {\n          \n            localStorage.setItem('accessToken', response.data.access)            \n            \n          })\n          .catch(error => {\n            console.log(error, \"Pas d'access au token\")\n          })\n          \n        })\n\n        let service = new ApiService()\n        service.find('/users/me/')\n        .then(response => {\n          let user = JSON.stringify(response.data)\n          \n            this.$store.state.user = user\n            // console.log(user)\n        })\n        .catch(error => {\n            console.log(error.data,\"Error \")\n        })\n\n\n      } else {\n        \n      }\n    }\n};\n</script>\n\n\n<style lang=\"scss\">\n  @import '../node_modules/bulma';\n  \n  .lds-dual-ring{\n      display: 'inline-block';\n      width: 80px;\n      height: 80px;\n  }\n  \n  .lds-dual-ring:after{\n      content: \"\";\n      display: block;\n      width: 64px;\n      height: 64px;\n      margin: 8px;\n      border-radius: 50%;\n      border: 6px solid #ccc;\n      border-color: #ccc transparent #ccc transparent;\n      animation: lds-dual-ring 1.2s linear infinite;\n  }\n  \n  \n  @keyframes lds-dual-ring{\n      0% {\n          transform: rotate(0deg);\n      }\n      100% {\n          transform: rotate(360deg);\n      }\n  }\n  \n  \n  .is-loading-bar {\n      height: 0;\n      overflow: hidden;\n      -webkit-transition: all 0.3s;\n      transition: all 0.3s;\n  \n      &.is-loading{\n          height: 80px;\n      }\n  }\n  \n  </style>\n  "]},"metadata":{},"sourceType":"module"}