{"ast":null,"code":"import axios from 'axios';\nconst network = {\n  ip: '127.0.0.1',\n  port: 8000\n};\nexport default class ApiService {\n  /**\n  * Initialisation \n  */\n  axiosInstance() {\n    return axios.create({\n      baseURL: `http://${network.ip}:${network.port}/api`,\n      headers: {\n        Authorization: `JWT ${localStorage.getItem('accessToken')}`\n      }\n    });\n  }\n  /**\n   * Création d'une requête post\n   * @param {String} url\n   * @param {Object} data\n   * @param {Object} onUploadProgress\n  */\n\n\n  addForm(url, data, onUploadProgress) {\n    return this.axiosInstance().post(url, data, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        \"X-CSRFToken\": \"{{ csrf_token }}\"\n      },\n      onUploadProgress\n    });\n  }\n  /**\n   * Création d'une requête post\n   * @param {String} url\n   * @param {Object} data\n   * @param {Integer} id\n   * @param {Object} onUploadProgress\n  */\n\n\n  updateForm(url, data, id, onUploadProgress) {\n    return this.axiosInstance().put(url, data, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        \"X-CSRFToken\": \"{{ csrf_token }}\"\n      },\n      params: {\n        id\n      },\n      onUploadProgress\n    });\n  }\n  /**\n   * Création d'une requête post\n   * @param {String} url\n   * @param {Object} data\n  */\n\n\n  add(url, data) {\n    return this.axiosInstance().post(url, data);\n  }\n  /**\n   * Exécution d'une requête get sur toutes les données disponibles.\n   * @param {String} url\n   */\n\n\n  find(url) {\n    return this.axiosInstance().get(url);\n  }\n  /**\n   * Exécute une réquête de selection par valeur d'un parametre\n   * @param {String} url\n   * @param {Integer} id\n   */\n\n\n  findOne(url, id) {\n    return this.axiosInstance().get(url, {\n      params: {\n        id\n      }\n    });\n  }\n  /**\n   * Exécute une réquête de selection par valeur d'un parametre\n   * @param {String} url\n   * @param {Integer} id\n   */\n\n\n  findBy(url) {\n    return this.axiosInstance().get(url);\n  }\n  /**\n   * Exécute une requête de mise à jour\n   * @param {String} url\n   * @param {Object} data\n   * @param {Integer} id\n   */\n\n\n  update(url, data, id) {\n    return this.axiosInstance().put(url, data, {\n      params: {\n        id\n      }\n    });\n  }\n\n  updatePatch(url, data, id) {\n    return this.axiosInstance().patch(url, data, {\n      params: {\n        id\n      }\n    });\n  }\n  /**\n   * Suppression d'une instance de donnée\n   * @param {String} url\n   * @param {Integer} id\n   */\n\n\n  delete(url, id) {\n    return this.axiosInstance().delete(url, {\n      params: {\n        id\n      }\n    });\n  }\n\n}","map":{"version":3,"names":["axios","network","ip","port","ApiService","axiosInstance","create","baseURL","headers","Authorization","localStorage","getItem","addForm","url","data","onUploadProgress","post","updateForm","id","put","params","add","find","get","findOne","findBy","update","updatePatch","patch","delete"],"sources":["/home/oumar/projets/auth/frontend/src/services/ApiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst network = {\n    ip: '127.0.0.1',\n    port: 8000\n}\n\nexport default class ApiService {\n\n     /**\n     * Initialisation \n    */\n    axiosInstance(){\n        return axios.create({\n            baseURL: `http://${network.ip}:${network.port}/api`,\n            headers:{\n                Authorization: `JWT ${localStorage.getItem('accessToken')}`\n            }\n        })\n    }\n\n    /**\n     * Création d'une requête post\n     * @param {String} url\n     * @param {Object} data\n     * @param {Object} onUploadProgress\n    */\n    addForm(url, data, onUploadProgress){\n        return this.axiosInstance().post(url, data, {\n            headers:{\n                \"Content-Type\": \"multipart/form-data\",\n                \"X-CSRFToken\"  : \"{{ csrf_token }}\"\n            },\n            onUploadProgress\n        })  \n    }\n\n    /**\n     * Création d'une requête post\n     * @param {String} url\n     * @param {Object} data\n     * @param {Integer} id\n     * @param {Object} onUploadProgress\n    */\n    updateForm(url, data, id, onUploadProgress){\n        return this.axiosInstance().put(url, data, {\n            headers:{\n                \"Content-Type\": \"multipart/form-data\",\n                \"X-CSRFToken\"  : \"{{ csrf_token }}\"\n            },\n            params: {id},\n            onUploadProgress\n        })  \n    }\n\n    /**\n     * Création d'une requête post\n     * @param {String} url\n     * @param {Object} data\n    */\n     add(url, data){\n        return this.axiosInstance().post(url, data)\n    }\n    /**\n     * Exécution d'une requête get sur toutes les données disponibles.\n     * @param {String} url\n     */\n    find(url){\n        return this.axiosInstance().get(url)\n    }\n\n    /**\n     * Exécute une réquête de selection par valeur d'un parametre\n     * @param {String} url\n     * @param {Integer} id\n     */\n    findOne(url, id){\n        return this.axiosInstance().get(url, {\n            params: {id}\n        })\n    }\n\n    /**\n     * Exécute une réquête de selection par valeur d'un parametre\n     * @param {String} url\n     * @param {Integer} id\n     */\n    findBy(url){\n        return this.axiosInstance().get(url)\n    }\n\n    /**\n     * Exécute une requête de mise à jour\n     * @param {String} url\n     * @param {Object} data\n     * @param {Integer} id\n     */\n    update(url, data, id){\n        return this.axiosInstance().put(url, data, {\n            params: {id}\n        })\n    }\n\n    updatePatch(url, data, id){\n        return this.axiosInstance().patch(url, data, {\n            params: {id}\n        })\n    }\n\n    /**\n     * Suppression d'une instance de donnée\n     * @param {String} url\n     * @param {Integer} id\n     */\n    delete(url, id){\n        return this.axiosInstance().delete(url, {\n            params:{id}\n        })\n    }\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG;EACZC,EAAE,EAAE,WADQ;EAEZC,IAAI,EAAE;AAFM,CAAhB;AAKA,eAAe,MAAMC,UAAN,CAAiB;EAE3B;AACL;AACA;EACIC,aAAa,GAAE;IACX,OAAOL,KAAK,CAACM,MAAN,CAAa;MAChBC,OAAO,EAAG,UAASN,OAAO,CAACC,EAAG,IAAGD,OAAO,CAACE,IAAK,MAD9B;MAEhBK,OAAO,EAAC;QACJC,aAAa,EAAG,OAAMC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoC;MADtD;IAFQ,CAAb,CAAP;EAMH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIC,OAAO,CAACC,GAAD,EAAMC,IAAN,EAAYC,gBAAZ,EAA6B;IAChC,OAAO,KAAKV,aAAL,GAAqBW,IAArB,CAA0BH,GAA1B,EAA+BC,IAA/B,EAAqC;MACxCN,OAAO,EAAC;QACJ,gBAAgB,qBADZ;QAEJ,eAAiB;MAFb,CADgC;MAKxCO;IALwC,CAArC,CAAP;EAOH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIE,UAAU,CAACJ,GAAD,EAAMC,IAAN,EAAYI,EAAZ,EAAgBH,gBAAhB,EAAiC;IACvC,OAAO,KAAKV,aAAL,GAAqBc,GAArB,CAAyBN,GAAzB,EAA8BC,IAA9B,EAAoC;MACvCN,OAAO,EAAC;QACJ,gBAAgB,qBADZ;QAEJ,eAAiB;MAFb,CAD+B;MAKvCY,MAAM,EAAE;QAACF;MAAD,CAL+B;MAMvCH;IANuC,CAApC,CAAP;EAQH;EAED;AACJ;AACA;AACA;AACA;;;EACKM,GAAG,CAACR,GAAD,EAAMC,IAAN,EAAW;IACX,OAAO,KAAKT,aAAL,GAAqBW,IAArB,CAA0BH,GAA1B,EAA+BC,IAA/B,CAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIQ,IAAI,CAACT,GAAD,EAAK;IACL,OAAO,KAAKR,aAAL,GAAqBkB,GAArB,CAAyBV,GAAzB,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIW,OAAO,CAACX,GAAD,EAAMK,EAAN,EAAS;IACZ,OAAO,KAAKb,aAAL,GAAqBkB,GAArB,CAAyBV,GAAzB,EAA8B;MACjCO,MAAM,EAAE;QAACF;MAAD;IADyB,CAA9B,CAAP;EAGH;EAED;AACJ;AACA;AACA;AACA;;;EACIO,MAAM,CAACZ,GAAD,EAAK;IACP,OAAO,KAAKR,aAAL,GAAqBkB,GAArB,CAAyBV,GAAzB,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIa,MAAM,CAACb,GAAD,EAAMC,IAAN,EAAYI,EAAZ,EAAe;IACjB,OAAO,KAAKb,aAAL,GAAqBc,GAArB,CAAyBN,GAAzB,EAA8BC,IAA9B,EAAoC;MACvCM,MAAM,EAAE;QAACF;MAAD;IAD+B,CAApC,CAAP;EAGH;;EAEDS,WAAW,CAACd,GAAD,EAAMC,IAAN,EAAYI,EAAZ,EAAe;IACtB,OAAO,KAAKb,aAAL,GAAqBuB,KAArB,CAA2Bf,GAA3B,EAAgCC,IAAhC,EAAsC;MACzCM,MAAM,EAAE;QAACF;MAAD;IADiC,CAAtC,CAAP;EAGH;EAED;AACJ;AACA;AACA;AACA;;;EACIW,MAAM,CAAChB,GAAD,EAAMK,EAAN,EAAS;IACX,OAAO,KAAKb,aAAL,GAAqBwB,MAArB,CAA4BhB,GAA5B,EAAiC;MACpCO,MAAM,EAAC;QAACF;MAAD;IAD6B,CAAjC,CAAP;EAGH;;AA/G2B"},"metadata":{},"sourceType":"module"}